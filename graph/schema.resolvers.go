package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"

	"github.com/lemuelZara/to-graphql/graph/model"
)

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, input model.NewCategory) (*model.Category, error) {
	c, err := r.CategoryDB.Save(input.Name, *input.Description)
	if err != nil {
		return &model.Category{}, err
	}

	return &model.Category{
		ID:          c.ID,
		Name:        c.Name,
		Description: &c.Description,
	}, nil
}

// CreateCourse is the resolver for the createCourse field.
func (r *mutationResolver) CreateCourse(ctx context.Context, input model.NewCourse) (*model.Course, error) {
	c, err := r.CourseDB.Save(input.Name, *input.Description, input.CategoryID)
	if err != nil {
		return &model.Course{}, err
	}

	return &model.Course{
		ID:          c.ID,
		Name:        c.Name,
		Description: &c.Description,
	}, nil
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context) ([]*model.Category, error) {
	categories, err := r.CategoryDB.FindAll()
	if err != nil {
		return []*model.Category{}, err
	}

	cm := []*model.Category{}
	for _, c := range categories {
		cm = append(cm, &model.Category{ID: c.ID, Name: c.Name, Description: &c.Description})
	}

	return cm, nil
}

// Courses is the resolver for the courses field.
func (r *queryResolver) Courses(ctx context.Context) ([]*model.Course, error) {
	courses, err := r.CourseDB.FindAll()
	if err != nil {
		return []*model.Course{}, err
	}

	cm := []*model.Course{}
	for _, c := range courses {
		cm = append(cm, &model.Course{ID: c.ID, Name: c.Name, Description: &c.Description})
	}

	return cm, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
